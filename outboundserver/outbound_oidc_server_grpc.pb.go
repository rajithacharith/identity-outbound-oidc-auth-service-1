// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: outboundserver/outbound_oidc_server.proto

package outboundserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OutboundOIDCServiceClient is the client API for OutboundOIDCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OutboundOIDCServiceClient interface {
	CanHandle(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CanHandleResponse, error)
	InitiateAuthentication(ctx context.Context, in *InitAuthRequest, opts ...grpc.CallOption) (*InitAuthResponse, error)
	ProcessAuthenticationResponse(ctx context.Context, in *ProcessAuthRequest, opts ...grpc.CallOption) (*ProcessAuthResponse, error)
}

type outboundOIDCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOutboundOIDCServiceClient(cc grpc.ClientConnInterface) OutboundOIDCServiceClient {
	return &outboundOIDCServiceClient{cc}
}

func (c *outboundOIDCServiceClient) CanHandle(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CanHandleResponse, error) {
	out := new(CanHandleResponse)
	err := c.cc.Invoke(ctx, "/OutboundOIDCService/CanHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outboundOIDCServiceClient) InitiateAuthentication(ctx context.Context, in *InitAuthRequest, opts ...grpc.CallOption) (*InitAuthResponse, error) {
	out := new(InitAuthResponse)
	err := c.cc.Invoke(ctx, "/OutboundOIDCService/InitiateAuthentication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outboundOIDCServiceClient) ProcessAuthenticationResponse(ctx context.Context, in *ProcessAuthRequest, opts ...grpc.CallOption) (*ProcessAuthResponse, error) {
	out := new(ProcessAuthResponse)
	err := c.cc.Invoke(ctx, "/OutboundOIDCService/ProcessAuthenticationResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutboundOIDCServiceServer is the server API for OutboundOIDCService service.
// All implementations must embed UnimplementedOutboundOIDCServiceServer
// for forward compatibility
type OutboundOIDCServiceServer interface {
	CanHandle(context.Context, *Request) (*CanHandleResponse, error)
	InitiateAuthentication(context.Context, *InitAuthRequest) (*InitAuthResponse, error)
	ProcessAuthenticationResponse(context.Context, *ProcessAuthRequest) (*ProcessAuthResponse, error)
	mustEmbedUnimplementedOutboundOIDCServiceServer()
}

// UnimplementedOutboundOIDCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOutboundOIDCServiceServer struct {
}

func (UnimplementedOutboundOIDCServiceServer) CanHandle(context.Context, *Request) (*CanHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanHandle not implemented")
}
func (UnimplementedOutboundOIDCServiceServer) InitiateAuthentication(context.Context, *InitAuthRequest) (*InitAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateAuthentication not implemented")
}
func (UnimplementedOutboundOIDCServiceServer) ProcessAuthenticationResponse(context.Context, *ProcessAuthRequest) (*ProcessAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessAuthenticationResponse not implemented")
}
func (UnimplementedOutboundOIDCServiceServer) mustEmbedUnimplementedOutboundOIDCServiceServer() {}

// UnsafeOutboundOIDCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OutboundOIDCServiceServer will
// result in compilation errors.
type UnsafeOutboundOIDCServiceServer interface {
	mustEmbedUnimplementedOutboundOIDCServiceServer()
}

func RegisterOutboundOIDCServiceServer(s grpc.ServiceRegistrar, srv OutboundOIDCServiceServer) {
	s.RegisterService(&OutboundOIDCService_ServiceDesc, srv)
}

func _OutboundOIDCService_CanHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutboundOIDCServiceServer).CanHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OutboundOIDCService/CanHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutboundOIDCServiceServer).CanHandle(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutboundOIDCService_InitiateAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutboundOIDCServiceServer).InitiateAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OutboundOIDCService/InitiateAuthentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutboundOIDCServiceServer).InitiateAuthentication(ctx, req.(*InitAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutboundOIDCService_ProcessAuthenticationResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutboundOIDCServiceServer).ProcessAuthenticationResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OutboundOIDCService/ProcessAuthenticationResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutboundOIDCServiceServer).ProcessAuthenticationResponse(ctx, req.(*ProcessAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OutboundOIDCService_ServiceDesc is the grpc.ServiceDesc for OutboundOIDCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OutboundOIDCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OutboundOIDCService",
	HandlerType: (*OutboundOIDCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CanHandle",
			Handler:    _OutboundOIDCService_CanHandle_Handler,
		},
		{
			MethodName: "InitiateAuthentication",
			Handler:    _OutboundOIDCService_InitiateAuthentication_Handler,
		},
		{
			MethodName: "ProcessAuthenticationResponse",
			Handler:    _OutboundOIDCService_ProcessAuthenticationResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "outboundserver/outbound_oidc_server.proto",
}
